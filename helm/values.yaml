# Resources for n8n deployments
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"

# Storage for n8n deployments
storage:
  size: 2Gi

# n8n configuration
n8n:
  protocol: http
  url: <url> # e.g. n8n.example.com
  encryptionKey: <encryption key> # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())'
  env:
    timezone: Europe/Berlin
    redisHost: redis-master

service: # n8n service configuration
  port: 5678

oauth: # oauth configuration
  clientId: <client id>
  clientSecret: <client secret>
  cookieSecret: <cookie secret> # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())'
  tenant: <tenant id>

workers: # worker scaling configuration
  replicas: 1

webhook: # webhook scaling configuration
  replicas: 1

postgres: # n8n postgres configuration
  deployment:
    local: "true" # local postgres deployment
    storage:
      size: 300Gi # postgres storage size
    adminCredentials: # postgres admin credentials these are generated by terraform
      secretName: postgres-secret
      userKey: POSTGRES_USER
      passwordKey: POSTGRES_PASSWORD
  host: postgres-service.n8n.svc.cluster.local # postgres host
  port: 5432 # postgres port
  database: n8n # postgres database
  credentials: # postgres credentials these are generated by terraform
    secretName: postgres-secret
    nonRootUserKey: POSTGRES_NON_ROOT_USER
    nonRootPasswordKey: POSTGRES_NON_ROOT_PASSWORD